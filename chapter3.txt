# 3.0 The Document Object

    1. document을 console에 치면 html이 출력됨. object로 존재하기 때문. 
     - document.title이라고 치면 설정된 값이 나옴. 
     - 값을 변환할 수도 있음. document.title = "Hi"와 같이 

# 3.1 HTML in Javascript

    1. id를 통한 document 접근
        - console.dir(document.getElementById("title")); 할 경우 HTML에서 
        접근 가능한 속성들을 다 표현해줌. 

# 3.2 Searching For Elements

    1. 만약 getElementById()에서 요구하는 id를 가진 Elements가 없다면 ? 
     - null을 반환한다. 

    2. 만약 여러 개의 Elements가 같은 id를 가진다면 ? 
     - getElementsByclassName()을 사용하여 배열을 반환한다. 

    3. 여러 개의 Elements를 HTML에 두고 getElementById()를 사용한다면 ? 
     - 제일 첫 번째 값을 반환한다. 
     - 여러 번 반복하여도 계속해서 같은 첫 번째를 반환한다. 

    4. getElementById() vs querySelector()
     - css Selector와 같은 방식으로 가져올 수 있음. 
     ex) document.querySelector(".hello h1")
     - .을 사용
     - 둘 다 첫 번쨰 element만 들고 온다. 
     ex) document.querySelector(".hello h1:first-child");
     - 같은 동일의 것 중에서 구조 중에 첫 번째 것을 찾은 것. 
     ex) document.querySelector("#hello") 
     - id사용해서 찾은 것. (원래 기본은 class이기 떄문에) 
    
    5. querySelectorAll()을 사용하면 배열을 사용할 수 있다. 

# 3.3 Events

    1. console.dir()로 찾아들어갈 경우 on으로 시작하는 많은 속성들을 볼수 있다. 
     - 이것들 대부분이 event이다. 

    2. addEventListener()를 사용
    ex) 
     const title = document.querySelector(".hello h1"); 
    
     function handleTitleClick() {
        console.log("title was clicked!"); 
     }

     title.addEventListener("click", handleTitleClick);

# 3.4 Events part Two 

    1. MDN reference를 찾아가는 방법을 설명. 
     - html에 Element의 속성을 property로 읽음. **

    2. console.dir()를 통해 property를 찾을 수 있음. 

# 3.5 More Events

    1. Window를 사용하는 것을 보여주려고 함. 
     ex) 
     function handleWindowResize() {
        document.body.style.backgroundColor = "tomato"; 
     }

     window.addEventListener("resize", handleWindowResize);
    
     ex) 
     function handleWindowCopy() {
         alert("copier"); 
     }

     window.addEventListener("copy", handleWindowCopy);

     - 이외에도 offline, online이 있다. 

    2. 할당을 통해서 event를 처리할 수 있지만 addEventListener를 선호한다. 
     - removeEventListener가 존재하기 때문이다. 

# 3.6 CSS in Javascript

    1. Javascript에서 CSS를 변경하는 것은 좋은 생각이 아닌다. 
    - 나도 실제로 이렇게 생각하고 있다. 언어끼리 섞이면 나중에 코드가 많이 꼬일 것이다. 

# 3.7 CSS in Javascript part Two

    1. 이전 모델에 대한 개선이 이루어진다. CSS에서의 변화를 줄 것이다. 
    - Javascript에서 color나 style을 언급하지 않을 것임. 
    - className을 통한 접근을 사용한다. 
    ex) 
    style.css
        h1 {
            color: cornflowerblue;
        }

        .active {
            color: tomato; 
        }

    app.js
        const h1 = document.querySelector("div.hello:first-child h1"); 

        function handleTitleClick() {
            h1.className = "active"; 
        }

        h1.addEventListener("click", handleTitleClick);

    2. 이름을 active에서 clicked라는 className을 변경함. 
     - 실수를 줄이기 위한 좋은 방법임. 

    3. const clickedClass = "clicked"라는 형태로 이름을 할당하는 것. 
     - 실수를 줄이기 위한 좋은 방식임.

    4. class가 있는 형태로 진행된다면? 
     - 즉, 기존에 존재하는 CSS가 있는데 여기서 일부분만 변경하고 싶으면, 일단 
     className을 변경하지 않는 것을 목표로 함. 

# 3.8 CSS in Javascript part Three

    1. 이전에 존재한 class가 이미 존재하여 그것의 style을 변경하지 않는 것을 목표로 한다. 
    - contains()이라고 할 경우. 
    ex) 
    function handleTitleClick() {
        const clickClass = "cliecked"; 
        if(h1.classList.contains(clickedClass)) {
            h1.classList.remove(clickedClass); 
        } else {
            h1.classList.add(clickedClass); 
        }
    }

    2. toggle function는 className이 존재한다면 제거를 없다면 className에 할당을
    한다. 
    ex)
    function handleTitleClick() {
        h1.classList.toggle("clicked"); 
    }

    h1.addEventListener("click", handleTitleClick); 

    - clicked에 대해서만 추가/제거를 진행함. 
    - 그 긴 줄을 다 대체할 수 있음. 
